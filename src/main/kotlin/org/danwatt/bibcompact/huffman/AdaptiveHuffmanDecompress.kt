package org.danwatt.bibcompact.huffman

import java.io.*
import java.util.*

/*
 * Reference Huffman coding
 * Copyright (c) Project Nayuki
 *
 * https://www.nayuki.io/page/reference-huffman-coding
 * https://github.com/nayuki/Reference-Huffman-coding
 */ /**
 * Decompression application using adaptive Huffman coding.
 *
 * Usage: java AdaptiveHuffmanDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "AdaptiveHuffmanCompress" application.
 */
object AdaptiveHuffmanDecompress {
    // Command line main application function.
    @JvmStatic
    fun main(args: Array<String>) {
        // Handle command line arguments
        if (args.size != 2) {
            System.err.println("Usage: java AdaptiveHuffmanDecompress InputFile OutputFile")
            System.exit(1)
            return
        }
        val inputFile = File(args[0])
        val outputFile = File(args[1])
        val input = BitInputStream(BufferedInputStream(FileInputStream(inputFile)))
        BufferedOutputStream(FileOutputStream(outputFile)).use { out -> decompress(input, out) }
    }

    // To allow unit testing, this method is package-private instead of private.
    fun decompress(input: BitInputStream, out: OutputStream) {
        val initFreqs = IntArray(257)
        Arrays.fill(initFreqs, 1)
        var freqs = FrequencyTable(initFreqs)
        val dec = HuffmanDecoder(input, freqs.buildCodeTree())
        var count = 0 // Number of bytes written to the output file
        while (true) {
            // Decode and write one byte
            val symbol = dec.read()
            if (symbol == 256) // EOF symbol
                break
            out.write(symbol)
            count++

            // Update the frequency table and possibly the code tree
            freqs.increment(symbol)
            if (count < 262144 && isPowerOf2(count) || count % 262144 == 0) // Update code tree
                dec.codeTree = freqs.buildCodeTree()
            if (count % 262144 == 0) // Reset frequency table
                freqs = FrequencyTable(initFreqs)
        }
    }

    private fun isPowerOf2(x: Int): Boolean = x > 0 && Integer.bitCount(x) == 1
}