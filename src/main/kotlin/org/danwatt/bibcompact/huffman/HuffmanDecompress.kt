package org.danwatt.bibcompact.huffman

import kotlin.Throws
import kotlin.jvm.JvmStatic
import java.io.*

/*
 * Reference Huffman coding
 * Copyright (c) Project Nayuki
 *
 * https://www.nayuki.io/page/reference-huffman-coding
 * https://github.com/nayuki/Reference-Huffman-coding
 */ /**
 * Decompression application using static Huffman coding.
 *
 * Usage: java HuffmanDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "HuffmanCompress" application.
 */
object HuffmanDecompress {
    // Command line main application function.
    @JvmStatic
    fun main(args: Array<String>) {
        // Handle command line arguments
        if (args.size != 2) {
            System.err.println("Usage: java HuffmanDecompress InputFile OutputFile")
            System.exit(1)
            return
        }
        val inputFile = File(args[0])
        val outputFile = File(args[1])
        val `in` = BitInputStream(BufferedInputStream(FileInputStream(inputFile)))
        BufferedOutputStream(FileOutputStream(outputFile)).use { out ->
            val canonCode = readCodeLengthTable(`in`)
            val code = canonCode.toCodeTree()
            decompress(code, `in`, out)
        }
    }

    // To allow unit testing, this method is package-private instead of private.
    @Throws(IOException::class)
    fun readCodeLengthTable(input: BitInputStream): CanonicalCode {
        val codeLengths = IntArray(257)
        for (i in codeLengths.indices) {
            // For this file format, we read 8 bits in big endian
            var v = 0
            for (j in 0..7) v = v shl 1 or input.readNoEof()
            codeLengths[i] = v
        }
        return CanonicalCode(codeLengths)
    }

    // To allow unit testing, this method is package-private instead of private.
    @Throws(IOException::class)
    fun decompress(code: CodeTree, `in`: BitInputStream, out: OutputStream) {
        val dec = HuffmanDecoder(`in`, code)
        while (true) {
            val symbol = dec.read()
            if (symbol == 256) // EOF symbol
                break
            out.write(symbol)
        }
    }
}